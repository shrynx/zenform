// @flow
import type { Node, ComponentType } from 'react'

export type RenderableProps<T> = {
  render?: (props: T) => Node,
  children?: (props: T) => Node,
  component?: ComponentType<*> | string,
}

type FieldUpdateActions = {
  setFieldValue: (field: string, value: any) => void,
  setMultipleFieldValues: (
    fieldValues: Array<{
      field: string,
      value: any,
    }>
  ) => void,
  setFieldError: (field: string, error: any) => void,
  setMultipleFieldErrors: (
    fieldErrors: Array<{
      field: string,
      error: any,
    }>
  ) => void,
  setFieldTouched: (field: string, isTouched: boolean) => void,
  setMultipleFieldTouched: (
    fieldTouched: Array<{
      field: string,
      isTouched: boolean,
    }>
  ) => void,
  setFieldData: (field: string, data: any) => void,
  setMultipleFieldData: (
    fieldData: Array<{
      field: string,
      data: any,
    }>
  ) => void,
  setActiveField: (field: string) => void,
}

export type ZenFormContext = {
  values: Object,
  errors: any,
  touched: any,
  data: any,
  activeField: string,
  setZenFormState: (s: any, cb?: () => void) => void,
} & FieldUpdateActions

export type FormActions = FieldUpdateActions & {
  setZenFormState: (s: any, cb?: () => void) => void,
  runValidations: (values: Object) => void,
  resetForm: () => void,
  setSubmitting: boolean => void,
}

export type FormProps = {
  onSubmit: ({ values: Object, changeSet: Object, formActions: FormActions }) => void,
  initialValues?: Object,
  validations?: (values: Object) => void | Object | Promise<*>,
  validateOnChange?: boolean,
  validateOnBlur?: boolean,
  enableChangeSetWith?: Array<{ field: string, id: string }>,
} & RenderableProps<*>

export type FormRenderProps = {
  values: Object,
  handleSubmit: (event?: SyntheticEvent<HTMLFormElement>) => void,
  resetForm: () => void,
  errors: Object,
  touched: Object,
  data: Object,
  activeField: string,
  isDirty: boolean,
  isInvalid: boolean,
  initialValues: Object,
  changeSet: ?Object,
} & FieldUpdateActions

export type FieldProps = {
  name: string,
  format?: (value: any) => any,
  parse?: (value: any) => any,
  allowNull?: boolean,
  value?: any,
} & RenderableProps<*>

export type CacheFieldProps = {
  name: string,
  value: any,
  error: any,
  data: any,
  isTouched: boolean,
  isActive: boolean,
  setFieldValue: (field: string, value: any) => void,
  setFieldTouched: (field: string, isTouched: boolean) => void,
  setActiveField: (field: string) => void,
  parse: (value: any) => any,
  allowNull: boolean,
  passedValue: any,
} & RenderableProps<*>

export type FieldRenderProps = {
  input: {
    name: string,
    value: any,
    checked?: boolean,
    onChange: (SyntheticInputEvent<*>) => void,
    onBlur: (SyntheticFocusEvent<*>) => void,
    onFocus: (SyntheticFocusEvent<*>) => void,
  },
  meta: {
    error: any,
    data: any,
    isActive: boolean,
    isTouched: boolean,
  },
}

export type FieldArrayProps = {
  name: string,
} & RenderableProps<*>

export type AuxFieldArrayProps = {
  name: string,
  values: Object,
  errors: any,
  touched: any,
  data: any,
  setZenFormState: (s: any, cb?: Function) => void,
} & RenderableProps<*>

export type FieldArrayRenderProps = {
  fields: {
    name: string,
    arrayValues: any[],
    forEach: (iterator: (name: string, index: number) => void) => void,
    insert: (index: number, value: any) => void,
    map: (iterator: (name: string, index: number) => any) => any[],
    move: (from: number, to: number) => void,
    pop: () => void,
    push: (value: any) => void,
    remove: (index: number) => void,
    replace: (index: number, value: any) => void,
    swap: (indexA: number, indexB: number) => void,
    unshift: (value: any) => number,
  },
}

export type FieldObserverData = {
  name: string,
  value: any,
  formValues: Object,
  data: any,
  isActive: any,
  isTouched: boolean,
} & FieldUpdateActions

export type FieldObserverProps = {
  name: string,
  onChange?: (args: FieldObserverData) => void,
  onBlur?: (args: FieldObserverData) => void,
  onFocus?: (args: FieldObserverData) => void,
}

export type ObserverProps = {
  name: string,
  formValues: any,
  value: any,
  isTouched: boolean,
  isActive: boolean,
  data: any,
  onChange: (args: FieldObserverData) => void,
  onBlur: (args: FieldObserverData) => void,
  onFocus: (args: FieldObserverData) => void,
} & FieldUpdateActions

export type FormObserverData = {
  values: Object,
} & FieldUpdateActions

export type FormObserverAuxProps = {
  values: Object,
  onChange: (args: FormObserverData) => void,
} & FieldUpdateActions

export type FormObserverProps = {
  onChange?: (args: FormObserverData) => void,
}
